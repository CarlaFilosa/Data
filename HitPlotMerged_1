%%%%%%%%%%%%% Hit plots with merged data

nameMerge{1} = strcat('Lastrev1_OrRevW.mat');
nameMerge{2} = strcat('Revconc_OrRevW.mat');
nameMerge{3} = strcat('Succession_2PhW.mat');
nameMerge{4} = strcat('Rev2_OrRevW.mat');
nameMerge{5} = strcat('Rev3_OrRevW.mat');

nameT = strcat('Lastrev1; Revconc; Succession; Rev2; Rev3');

alg= strcat('Stand_');
algPru = strcat('Pru_');
% namesave = strcat('MergeData',algPru,nameAll);

fignum =[1,2,3,4,5,6,7,8];

for i =1: length(nameMerge)
%     nameSmallBigMerge{i} = strcat('SmallBig_An_Disp',alg,nameMerge{i})
%%%% Pruned
%%% nameAnMerge{i} = strcat('An_Disp_',algPru,nameMerge{i})

%%%%% Postpruned
nameAnMerge{i} = strcat('PostPru_BinRed_An_Disp',alg,nameMerge{i})

load(nameAnMerge{i})
clear c
load('classlist.mat');
%  nnn(i,:)=nn(a);
%  aa(i,:)=a;
[new_data] = parId(new_data,a,nn);


 for k=1:length(new_data.par)
 [new_data] = labels(new_data,c,k);
 end
 
very_data{i}=new_data;


%%%%%%%%%%%%% Pruned
% % % As_activityT{i} = ass_act_pru;
% % % As_across_BinsT{i} = As_acr_bins_pru;
% % % As_order_BinsT{i} = As_order_pru;
% % % clear new_data a nn As_acr_bins_pru As_order_pru


%%%% Postpruned
As_activity_smallBinsT{i} = assembly_activity_smallBins;
As_activity_largeBinsT{i} = assembly_activity_largeBins;
As_across_smallBinsT{i} = As_across_smallBins;
As_order_smallBinsT{i} = As_order_smallBins;
As_across_largeBinsT{i} = As_across_largeBins;
As_order_largeBinsT{i} = As_order_largeBins; 
clear new_data a nn As_across_smallBins As_order_smallBins As_across_largeBins As_order_largeBins As_activity_smallBins As_activity_largeBins
end
%%%% Pruned
% % % clearvars -except very_data As_across_BinsT As_order_BinsT As_activityT c nameMerge nameT fignum namesave

%%%%% Postpruned
clearvars -except very_data As_activity_smallBinsT As_activity_largeBinsT As_across_smallBinsT As_order_smallBinsT As_across_largeBinsT As_order_largeBinsT c nameMerge nameT fignum BinSizes MaxLags nameT
% save (namesave)
%%

for i =1:length(very_data)
    TotAn(i)=length(very_data{i}.par);
for k=1:TotAn(i)
    nneuVS{i}{k}=0;
    nneuVTA{i}{k}=0;
end
end

SumTotAn=sum(TotAn);

for i =1:length(very_data)
for k=1:TotAn(i)
    for j=1:size(very_data{i}.spike_regionNoId{k},2)
        [nneuVS{i}{k}] = countNeu(very_data{i}.spike_regionNoId{k}(1,j),1,nneuVS{i}{k});
        [nneuVTA{i}{k}] = countNeu(very_data{i}.spike_regionNoId{k}(1,j),2,nneuVTA{i}{k});
    end

end
end

%% %%% Pruned

% % % As_across_Bins_All=As_across_BinsT{1};
% % % As_order_Bins_All=As_order_BinsT{1};
% % % As_activity_All = As_activityT{1};
% % % nneuVS_All = nneuVS{1};
% % % nneuVTA_All = nneuVTA{1};
% % % Data_All.par = very_data{1}.par;
% % % Data_All.eventsOld = very_data{1}.events;
% % % Data_All.events = very_data{1}.eventsCut;
% % % Data_All.info = very_data{1}.info;
% % % Data_All.spiketrain = very_data{1}.spiketrain;
% % % Data_All.spikeT_BegEnd = very_data{1}.spikeT_BegEnd;
% % % for i=1:length(very_data)-1
% % %     [As_across_Bins_All]=[As_across_Bins_All,As_across_BinsT{i+1}];
% % %     [As_order_Bins_All]=[As_order_Bins_All,As_order_BinsT{i+1}];
% % %     [As_activity_All] = [As_activity_All,As_activityT{i+1}];
% % %     [nneuVS_All]=[nneuVS_All,nneuVS{i+1}];
% % %     [nneuVTA_All]=[nneuVTA_All,nneuVTA{i+1}];
% % %     [Data_All.par]=[Data_All.par,very_data{i+1}.par];
% % %     [Data_All.eventsOld]=[Data_All.eventsOld,very_data{i+1}.events];
% % %     [Data_All.events]=[Data_All.events,very_data{i+1}.eventsCut];
% % %     [Data_All.info]=[Data_All.info,very_data{i+1}.info];
% % %     [Data_All.spiketrain]=[Data_All.spiketrain,very_data{i+1}.spiketrain];
% % %     [Data_All.spikeT_BegEnd]=[Data_All.spikeT_BegEnd,very_data{i+1}.spikeT_BegEnd];
% % % end

%                           %%%%%%%% Form pairs and struct_pair
% % % [pairs_r,pairs_vsvs,pairs_vsvta,pairs_vtavta] = PairsInfo(As_across_Bins_All,As_order_Bins_All,nneuVS_All,SumTotAn);
% % % 
% % % clear a b A B i ii j k
% % % [pairs_vsvta] = PairMatNeuLabelsID(pairs_vsvta,Data_All);
% % % 
% % % [struct_pairAll] = PairsOrgByPair(pairs_vsvta);
% % % 
% % % [struct_pairAll] = PairNeuLabelsID(struct_pairAll,Data_All); % Labels of neurons in pairs
% % % clear struct_pair
% % % struct_pair =struct_pairAll;



%% %%%%% Postpruned
As_activity_smallBins_All = As_activity_smallBinsT{1};
As_activity_largeBins_All = As_activity_largeBinsT{1};
As_across_smallBins_All=As_across_smallBinsT{1};
As_across_largeBins_All=As_across_largeBinsT{1};
As_order_smallBins_All=As_order_smallBinsT{1};
As_order_largeBins_All=As_order_largeBinsT{1};
nneuVS_All = nneuVS{1};
nneuVTA_All = nneuVTA{1};
Data_All.par=very_data{1}.par;
Data_All.eventsOld = very_data{1}.events;
Data_All.events = very_data{1}.eventsCut;
Data_All.info = very_data{1}.info;
Data_All.spiketrain = very_data{1}.spiketrain;
Data_All.spikeT_BegEnd = very_data{1}.spikeT_BegEnd;
for i=1:length(very_data)-1
    [As_activity_smallBins_All] = [As_activity_smallBins_All,As_activity_smallBinsT{i+1}];
    [As_activity_largeBins_All] = [As_activity_largeBins_All,As_activity_largeBinsT{i+1}];
    [As_across_smallBins_All]=[As_across_smallBins_All,As_across_smallBinsT{i+1}];
    [As_across_largeBins_All]=[As_across_largeBins_All,As_across_largeBinsT{i+1}];
    [As_order_smallBins_All]=[As_order_smallBins_All,As_order_smallBinsT{i+1}];
    [As_order_largeBins_All]=[As_order_largeBins_All,As_order_largeBinsT{i+1}];
    [nneuVS_All]=[nneuVS_All,nneuVS{i+1}];
    [nneuVTA_All]=[nneuVTA_All,nneuVTA{i+1}];
    [Data_All.par]=[Data_All.par,very_data{i+1}.par];
    [Data_All.eventsOld]=[Data_All.eventsOld,very_data{i+1}.events];
    [Data_All.events]=[Data_All.events,very_data{i+1}.eventsCut];
    [Data_All.info]=[Data_All.info,very_data{i+1}.info];
    [Data_All.spiketrain]=[Data_All.spiketrain,very_data{i+1}.spiketrain];
    [Data_All.spikeT_BegEnd]=[Data_All.spikeT_BegEnd,very_data{i+1}.spikeT_BegEnd];
end



[pairs_r_small,pairs_vsvs_small,pairs_vsvta_small,pairs_vtavta_small] = PairsInfo(As_across_smallBins_All,As_order_smallBins_All,nneuVS_All,SumTotAn);
[pairs_r_large,pairs_vsvs_large,pairs_vsvta_large,pairs_vtavta_large] = PairsInfo(As_across_largeBins_All,As_order_largeBins_All,nneuVS_All,SumTotAn);

[pairs_vsvta_small] = PairMatNeuLabelsID(pairs_vsvta_small,Data_All);
[pairs_vsvta_large] = PairMatNeuLabelsID(pairs_vsvta_large,Data_All);
clear a b A B i ii j k

[struct_pair_small] = PairsOrgByPair(pairs_vsvta_small);
[struct_pair_large] = PairsOrgByPair(pairs_vsvta_large);


[struct_pair_small] = PairNeuLabelsID(struct_pair_small,Data_All);
[struct_pair_large] = PairNeuLabelsID(struct_pair_large,Data_All);
copy_struct_pair_small=struct_pair_small;
copy_struct_pair_large=struct_pair_large;
%%
% pairs_lag_XXX =pairs_vsvta{1};
% for i = 1: length(pairs_vsvta)-1
% pairs_lag_XXX=[pairs_lag_XXX;pairs_vsvta{i+1}];
% end
%% Indices for start and end

ChapOr=1; % these are the phases Original
ChapRev=2;

%%%% GivInEnd gives me the indices in a particular chapter and differently
%%%% for the phases 'stable', 'unstable' and 'all'
[cinOr, cendOr, ccrOr, inOr, finOr] = GiveInEnd( Data_All,ChapOr, 'all' );  % indices for the whole phases 
[cinRev,cendRev, ccrRev, inRev, finRev] = GiveInEnd( Data_All,ChapRev, 'all' );

start = cinOr;
stop = cendRev;


startOr = cinOr;
stopOr = cendOr;

startRev = cinRev;
stopRev = cendRev;

%% Recale assembly activity and find indices for stable and non-stable phase

%%%%% For small bins
As_activity_All = As_activity_smallBins_All;
struct_pair =struct_pair_small;

%%%%% For large Bins
% As_activity_All = As_activity_largeBins_All;
% struct_pair =struct_pair_large;

minInt=0.01;
for k=1:SumTotAn
  if ~isempty(As_activity_All{k}) && ~isempty(Data_All.spikeT_BegEnd{k})
  binref.B{k}=min(min(Data_All.spikeT_BegEnd{k},[],2)):minInt:max(max(Data_All.spikeT_BegEnd{k},[],2));

   for i=1:size(As_activity_All{k},1)
   
      [AsTime{k}{i}(:,1)]=TimeRescaleMin(As_activity_All{k}{i}(:,1),As_activity_All{k}{i}(:,1), binref.B{k});
      [AsTime{k}{i}(:,2)]=TimeRescaleMin(As_activity_All{k}{i}(:,2),As_activity_All{k}{i}(:,1), binref.B{k});
    
   end
 end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Around reward and odour
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for k= 1:SumTotAn
[FindIndOd{k}] = FindIndicesForAssem(Data_All,binref.B,start,stop,k,'odor',0.705,0.705);  %around odour
end
for k= 1:SumTotAn
[FindIndRew{k}] = FindIndicesForAssem(Data_All,binref.B,start,stop,k,'reward',0.705,0.705);  %around reward
end

for k= 1:SumTotAn
[FindIndNoRew{k}] = FindIndicesForAssem(Data_All,binref.B,start,stop,k,'HitNoRew',0.705,2.255); % supposed rewarded, not rewarded
end

for k= 1:SumTotAn
[FindIndRewT{k}] = FindIndicesForAssem(Data_All,binref.B,start,stop,k,'HitRew',0.705,2.255);  %rewarded trials one sec before odor onset, one sec after end odour
end
for k= 1:SumTotAn
[FindIndFLick{k}] = FindIndicesForAssem(Data_All,binref.B,start,stop,k,'FirstLick',0.705,0.705);  %around first lick
end

%%
%%% Odour 
[asTime_US_Od] = AsOnInd(AsTime,FindIndOd,Data_All,start);
%%% Reward
[asTime_US_Rew] = AsOnInd(AsTime,FindIndRew,Data_All,start);
%%%%%% Hit Not rewarded in the interval odour plus
[asTime_US_NoRew] = AsOnInd(AsTime,FindIndNoRew,Data_All,start);
%%%% Hit rewarded in the interval odour plus
[asTime_US_RewT] = AsOnInd(AsTime,FindIndRewT,Data_All,start);
%%%% Around the first Lick
[asTime_US_FLick] = AsOnInd(AsTime,FindIndFLick,Data_All,start);


%%%%%%%%%%%%%%%%%%%%%%%%%
%%
Region='vsvta';
% Region='vsvs';
% Region='vtavta';

%Dir stays for "Directionality", can assume these values
%'vs->vta Dir','vta->vs Dir','vs->vta Inv', 'vta->vs Inv'0
%  Dir='vs->vta Dir';
%Dir='vs->vta Inv';
% Dir='vs->vta AllBins';

%  Dir='vta->vs Dir';
%  Dir='vta->vs Inv';
%  Dir='vta->vs AllBins';
%    Dir=0;
Dir='small';
% Dir='large';
hit = 1;
rej = 3;
fal = 2;
miss = 4;

%% %%%%%%% Odour

for k=1:SumTotAn
    if ~isempty(struct_pair{k}.pair)  % & (length(new_spM.eventsOld{k})~=length(new_spM.events{k}))
[as_sel_HOd{k},MeanTr_HOd{k},MNormTr_HOd{k},StETr_HOd{k},MaxA_HOd{k},AsForMean_HOd{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_Od,hit,start(k),k);
[as_sel_ROd{k},MeanTr_ROd{k},MNormTr_ROd{k},StETr_ROd{k},MaxA_ROd{k},AsForMean_ROd{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_Od,rej,start(k),k);  
[as_sel_FOd{k},MeanTr_FOd{k},MNormTr_FOd{k},StETr_FOd{k},MaxA_FOd{k},AsForMean_FOd{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_Od,fal,start(k),k);    
[as_sel_MOd{k},MeanTr_MOd{k},MNormTr_MOd{k},StETr_MOd{k},MaxA_MOd{k},AsForMean_MOd{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_Od,miss,start(k),k); 
    end 
end
%% First Lick

for k=1:SumTotAn
    if ~isempty(struct_pair{k}.pair)  % & (length(new_spM.eventsOld{k})~=length(new_spM.events{k}))
[as_sel_HLick{k},MeanTr_HLick{k},MNormTr_HLick{k},StETr_HLick{k},MaxA_HLick{k},AsForMean_HLick{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_FLick,hit,start(k),k);
[as_sel_RLick{k},MeanTr_RLick{k},MNormTr_RLick{k},StETr_RLick{k},MaxA_RLick{k},AsForMean_RLick{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_FLick,rej,start(k),k);  
[as_sel_FLick{k},MeanTr_FLick{k},MNormTr_FLick{k},StETr_FLick{k},MaxA_FLick{k},AsForMean_FLick{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_FLick,fal,start(k),k);    
[as_sel_MLick{k},MeanTr_MLick{k},MNormTr_MLick{k},StETr_MLick{k},MaxA_MLick{k},AsForMean_MLick{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_FLick,miss,start(k),k); 
    end 
end
%% %% Reward

for k=1:SumTotAn
    if ~isempty(struct_pair{k}.pair)  % & (length(new_spM.eventsOld{k})~=length(new_spM.events{k}))
[as_sel_Rew{k},MeanTr_HRew{k},MNormTr_HRew{k},StETr_HRew{k},MaxA_HRew{k},AsForMean_HRew{k},~,~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_Rew,hit,start(k),k);

    end 
end

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% All Phases Together

for k=1:length(MaxA_HOd)
    [MaxATot{k}] = MaxMaxTr(MaxA_HOd{k},MaxA_FOd{k},MaxA_HLick{k},MaxA_FLick{k});
end
 

[MNorm_HOd] = NormTotMax(MaxATot,MeanTr_HOd);
[MNorm_ROd] = NormTotMax(MaxATot,MeanTr_ROd);
[MNorm_FOd] = NormTotMax(MaxATot,MeanTr_FOd);
[MNorm_MOd] = NormTotMax(MaxATot,MeanTr_MOd);

[MNorm_HLick] = NormTotMax(MaxATot,MeanTr_HLick);
[MNorm_RLick] = NormTotMax(MaxATot,MeanTr_RLick);
[MNorm_FLick] = NormTotMax(MaxATot,MeanTr_FLick);
[MNorm_MLick] = NormTotMax(MaxATot,MeanTr_MLick);
%%%%%%%% Hit/ Different sorting
[ActH_Od,MaxI_HO1,SortH_O1] = ActAsAllSameLengthInt(length(MNorm_HOd), MNorm_HOd);
[ActSortH_Od] = SortAct(ActH_Od,SortH_O1);

[ActH_Lick,MaxI_L1,SortH_L1] = ActAsAllSameLengthInt(length(MNorm_HLick), MNorm_HLick);
[ActSortH_Lick] = SortAct(ActH_Lick,SortH_O1);
[ActSortH_Lick1] = SortAct(ActH_Lick,SortH_L1);

[ActSortH_Od1] = SortAct(ActH_Od,SortH_L1);

%%%%%%% False Alarm
[ActF_Od,MaxI_FO1,SortF_O1] = ActAsAllSameLengthInt(length(MNorm_FOd), MNorm_FOd);
[ActSortF_Od] = SortAct(ActF_Od,SortF_O1);

[ActF_Lick,MaxFI_L1,SortF_L1] = ActAsAllSameLengthInt(length(MNorm_FLick), MNorm_FLick);
[ActSortF_Lick] = SortAct(ActF_Lick,SortF_O1);
[ActSortF_Lick1] = SortAct(ActF_Lick,SortF_L1);
[ActSortF_Lick2] = SortAct(ActF_Lick,SortH_O1);  % on the first panel odor
[ActSortF_Lick3] = SortAct(ActF_Lick,SortH_L1); % on the first panel lick

[ActSortF_Od1] = SortAct(ActF_Od,SortF_L1);
[ActSortF_Od2] = SortAct(ActF_Od,SortH_O1);   % on the first panel odor
[ActSortF_Od3] = SortAct(ActF_Od,SortH_L1);  % on the first panel lick

[ActSortH_Od22] = SortAct(ActH_Od,SortF_O1);
[ActSortH_Lick22] = SortAct(ActH_Lick,SortF_O1);


gvect=-70:70;

NoVect=nan(size(ActSortH_Od,1),2);
%%%%%% Hit
[ActH_LickOdS]=[ActSortH_Od,NoVect,ActSortH_Lick]; % ordered on the Odour
ActH_LickOdS(:,end+1)=nan;

[ActH_LickOdS1]=[ActSortH_Od1,NoVect,ActSortH_Lick1]; % Ordered on Lick
 ActH_LickOdS1(:,end+1)=nan;

%%%%%% False Alarm

[ActF_LickOdS]=[ActSortF_Od,NoVect,ActSortF_Lick]; % ordered on the Odour
 ActF_LickOdS(:,end+1)=nan;

[ActF_LickOdS1]=[ActSortF_Od1,NoVect,ActSortF_Lick1]; % Ordered on Lick
 ActF_LickOdS1(:,end+1)=nan;

[ActF_LickOdS2]=[ActSortF_Od2,NoVect,ActSortF_Lick2]; % Ordered on First Odor (Hit)
 ActF_LickOdS2(:,end+1)=nan;
 
 [ActF_LickOdS3]=[ActSortF_Od3,NoVect,ActSortF_Lick3]; % Ordered on First lick (Hit)
 ActF_LickOdS3(:,end+1)=nan;

 [ActH_LickOdS2]=[ActSortH_Od22,NoVect,ActSortH_Lick22]; % Ordered on second odour (Hit)
 ActH_LickOdS2(:,end+1)=nan;

tick=[find(gvect==-50),find(gvect==0),find(gvect==50),...
      size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-50),...
      size(ActH_Lick,2)+size(NoVect,2)+find(gvect==0),...
      size(ActH_Lick,2)+size(NoVect,2)+find(gvect==50)];
ticklabel =[-0.5,0,0.5,-0.5,0,0.5];
%%
ActH1 = ActH_LickOdS2; ActH2 = ActH_LickOdS1; ActF1 = ActF_LickOdS; ActF2 = ActF_LickOdS3; 
addpath('/zifnas/Carla/Tactbox/Cell_assembly_detection/Programs_and_data/Carla')
figure(3);hold on;
subplot(2,2,1)
pp=pcolor(ActH1);hold on;
xlim([1,size(ActH1,2)])
ylim([1,size(ActH1,1)])
xticks(tick)
xticklabels(ticklabel)
text(find(gvect==-10),-18,'Time(sec)')
text(find(gvect==-10),size(ActH_Lick,1)+10,'Odor onset')
text(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-10),-18,'Time(sec)')
text(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-10),size(ActH_Lick,1)+10,'First Lick')
% text(find(gvect==-70)-10,size(ActH_Lick,1)/2,'Sorted on Odour','Rotation',90)
vline(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==0),'-.r');
vline(find(gvect==0),'-.r');
set(pp, 'EdgeColor', 'none');
grid on;
ylabel('Pairs Actvity')
title('Hit')

subplot(2,2,2)
pp=pcolor(ActH2);hold on;
xlim([1,size(ActH2,2)])
ylim([1,size(ActH2,1)])
xticks(tick)
xticklabels(ticklabel)
text(find(gvect==-10),-18,'Time(sec)')
text(find(gvect==-10),size(ActH_Lick,1)+10,'Odor onset')
text(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-10),-18,'Time(sec)')
text(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-10),size(ActH_Lick,1)+10,'First Lick')
% text(find(gvect==-70)-10,size(ActH_Lick,1)/2,'Sorted on First Lick','Rotation',90)
vline(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==0),'-.r');
vline(find(gvect==0),'-.r');
set(pp, 'EdgeColor', 'none');
grid on;
ylabel('Pairs Actvity')
title('Hit')


subplot(2,2,3)
pp=pcolor(ActF1);hold on;
xlim([1,size(ActF1,2)])
ylim([1,size(ActF1,1)])
xticks(tick)
xticklabels(ticklabel)
text(find(gvect==-10),-18,'Time(sec)')
text(find(gvect==-10),size(ActH_Lick,1)+10,'Odor onset')
text(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-10),-18,'Time(sec)')
text(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-10),size(ActH_Lick,1)+10,'First Lick')
text(find(gvect==-70)-20,size(ActH_Lick,1)/2,'Sorted on Odour','Rotation',90)
vline(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==0),'-.r');
vline(find(gvect==0),'-.r');
set(pp, 'EdgeColor', 'none');
grid on;
ylabel('Pairs Actvity')
title('False Alarm')

subplot(2,2,4)
pp=pcolor(ActF2);hold on;
xlim([1,size(ActF2,2)])
ylim([1,size(ActF2,1)])
xticks(tick)
xticklabels(ticklabel)
text(find(gvect==-10),-18,'Time(sec)')
text(find(gvect==-10),size(ActH_Lick,1)+10,'Odor onset')
text(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-10),-18,'Time(sec)')
text(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==-10),size(ActH_Lick,1)+10,'First Lick')
text(find(gvect==-70)-20,size(ActH_Lick,1)/2,'Sorted on First Lick','Rotation',90)
vline(size(ActH_Lick,2)+size(NoVect,2)+find(gvect==0),'-.r');
vline(find(gvect==0),'-.r');
set(pp, 'EdgeColor', 'none');
grid on;
ylabel('Pairs Actvity')
title('False Alarm')


%%
%%%%%%%%% Rewarded around reward 
for k=1:SumTotAn
    if ~isempty(struct_pair{k}.pair)  % & (length(new_spM.eventsOld{k})~=length(new_spM.events{k}))
[as_sel_HRew{k},MeanTr_HRew{k},MNormTr_HRew{k},StETr_HRew{k},MaxA_HRew{k},AsForMean_HRew{k},struct_pairRewAll{k},~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_Rew,hit,start(k),k);
    end 
end


%%%%%%%%% Not Rewarded in the interval (fv_on-0.5; fv_on+2.25) (the maximum lick delay is 1250 and after 1sec the reward is supposed to be there)
for k=1:SumTotAn
    if ~isempty(struct_pair{k}.pair)  % & (length(new_spM.eventsOld{k})~=length(new_spM.events{k}))
[as_sel_HNoRew{k},MeanTr_HNoRew{k},MNormTr_HNoRew{k},StETr_HNoRew{k},MaxA_HNoRew{k},AsForMean_HNoRew{k},struct_pairNoRewAll{k},~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_NoRew,hit,start(k),k);
    end 
end


%%%%%%%%% Rewarded in the interval (fv_on-0.5; fv_on+2.25) (the maximum lick delay is 1250 and after 1sec the reward is supposed to be there)
for k=1:SumTotAn
    if ~isempty(struct_pair{k}.pair)  % & (length(new_spM.eventsOld{k})~=length(new_spM.events{k}))
[as_sel_HRewT{k},MeanTr_HRewT{k},MNormTr_HRewT{k},StETr_HRewT{k},MaxA_HRewT{k},AsForMean_HRewT{k},struct_pairRewTAll{k},~] = As_TaskCodePru(Dir,struct_pair,Data_All,asTime_US_RewT,hit,start(k),k);
    end 
end

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% All Phases Together


for k=1:size(MaxA_HOd,2)
    [MaxAOd{k}] = MaxMaxTr(MaxA_HOd{k},MaxA_ROd{k},MaxA_FOd{k},MaxA_MOd{k});
end
 

[MNorm_HOd] = NormTotMax(MaxAOd,MeanTr_HOd);
[MNorm_ROd] = NormTotMax(MaxAOd,MeanTr_ROd);
[MNorm_FOd] = NormTotMax(MaxAOd,MeanTr_FOd);
[MNorm_MOd] = NormTotMax(MaxAOd,MeanTr_MOd);

%%
[Mean_POd] = PrDim(MNorm_HOd,MNorm_ROd,MNorm_MOd,MNorm_FOd,MNorm_HOd,MNorm_ROd,MNorm_MOd,MNorm_FOd);  % two times the input arguments simply because the function was made to have 8 input

[ActHOd,MaxIndOd1,SortMaxROd1] = ActAsAllNew(length(MNorm_HOd), MNorm_HOd,Mean_POd);
[ActSortHOd] = SortAct(ActHOd,SortMaxROd1);

[ActROd,MaxIndOd,SortMaxROd] = ActAsAllNew(length(MNorm_HOd), MNorm_ROd,Mean_POd);
[ActSortROd] = SortAct(ActROd,SortMaxROd);


[ActMOd,MaxIndOd,SortMaxROd] = ActAsAllNew(length(MNorm_HOd), MNorm_MOd,Mean_POd);
[ActSortMOd] = SortAct(ActMOd,SortMaxROd);


[ActFOd,MaxIndOd,SortMaxROd] = ActAsAllNew(length(MNorm_HOd), MNorm_FOd,Mean_POd);
[ActSortFOd] = SortAct(ActFOd,SortMaxROd);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%% Each Panel sorted o the maxima of the first panel
[ActSortHOd1] = SortAct(ActHOd,SortMaxROd1);

[ActSortROd1] = SortAct(ActROd,SortMaxROd1);

[ActSortMOd1] = SortAct(ActMOd,SortMaxROd1);

[ActSortFOd1] = SortAct(ActFOd,SortMaxROd1);

%%


%% %%%%%%%%%%%%%%%%%%%%% Hit Plot

ActAllH=[]; ActAllR=[];
 ActAllH=ActSortHOd_2;  ActAllR=ActSortHRew_2; 
% ActAllH=ActSortHOd1_2;  ActAllR=ActSortHRew1_2; 
% ActAllH=ActSortHOd2_2;  ActAllR=ActSortHRew_2;

ActAllH(:,end+1)=nan; ActAllR(:,end+1)=nan; 
% h = pcolor(X,Y,C);
% set(h, 'EdgeColor', 'none');

switch Dir
    case 'small'
BinDirText=strcat(Dir,'--BinSize Range: [0.01, 0.25]');
    case 'large'
BinDirText=strcat(Dir,'--BinSize Range: [0.35, 1.6]');
    case 'vs->vta Dir'
BinDirText=strcat(Dir,'--BinSize Range: [0.01, 0.25]');
    case 'vs->vta Inv'
BinDirText=strcat(Dir,'--BinSize Range: [0.35, 1.6]');
    case 'vta->vs Dir'
BinDirText=strcat(Dir,'--BinSize Range: [0.35, 1.6]');
    case 'vta->vs Inv'
BinDirText=strcat(Dir,'--BinSize Range: [0.01, 0.25]');
% BinDirText=strcat(Dir,'--BinSize Range: [0.01, 1.6]');
case 'vta->vs AllBins' 
    BinDirText=strcat(Dir);
case 'vs->vta AllBins'
BinDirText=strcat(Dir);
    otherwise
        BinDirText=strcat('Region--',Region,'--All Bin');
end
addpath('/zifnas/Carla/Tactbox/Cell_assembly_detection/Programs_and_data/Carla');
figure(fignum(4));
subplot(1,2,1)
pp=pcolor(ActAllH);hold on;
set(pp, 'EdgeColor', 'none');
grid on;
xticks([1,50,101])
xticklabels([-0.5,0,0.5])
% vline(1/minInt,'-.r');hold on;
vline(0.5/minInt,'-.r');hold on;
ylabel('Pairs Actvity')
title('Odour')
text(-20,size(ActAllR,1)/2,{'Each panel sorted'},'rotation',90,'Fontsize',12);
xlabel('Time(sec)')
box on;

subplot(1,2,2)
pp=pcolor(ActAllR);hold on;
set(pp, 'EdgeColor', 'none');hold on;
grid on;hold on;
% xticklabels(tick)
% vline(1/minInt,'-.r');hold on;
xticks([1,50,101])
xticklabels([-0.5,0,0.5])
vline(0.5/minInt,'-.r');hold on;
title('Reward')
xlabel('Time(sec)')

text(110,size(ActAllH,1)/2,{nameT, BinDirText},'rotation',270,'Fontsize',12);
box on;

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



